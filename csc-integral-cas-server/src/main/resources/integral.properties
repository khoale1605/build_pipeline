#
# Licensed to Jasig under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Jasig licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

server.name=${server.name}
server.prefix=${server.name}/cas
# IP address or CIDR subnet allowed to access the /status URI of CAS that exposes health check information
cas.securityContext.status.allowedSubnet=127.0.0.1

# Security settings
cas.securityContext.serviceProperties.service=https://CSCVIEAH767820:18443/cas/services/j_acegi_cas_security_check

cas.securityContext.serviceProperties.adminRoles=ROLE_ADMIN
cas.securityContext.casProcessingFilterEntryPoint.loginUrl=${cas.securityContext.casProcessingFilterEntryPoint.loginUrl}
cas.securityContext.ticketValidator.casServerUrlPrefix=${cas.securityContext.ticketValidator.casServerUrlPrefix}



# Name of properties file defining views
cas.themeResolver.defaultThemeName=cas-theme-default
cas.viewResolver.basename=default_views
#cas.viewResolver.basename=csc_views

##
# Unique CAS node name
# host.name is used to generate unique Service Ticket IDs and SAMLArtifacts.  This is usually set to the specific
# hostname of the machine running the CAS node, but it could be any label so long as it is unique in the cluster.
host.name=cas-server

##
# Database flavors for Hibernate
#
# One of these is needed if you are storing Services or Tickets in an RDBMS via JPA.
#
# database.hibernate.dialect=org.hibernate.dialect.OracleDialect
# database.hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
# database.hibernate.dialect=org.hibernate.dialect.HSQLDialect
hibernate.dialect=${hibernate.dialect}
inspektr.database.driverClass=${inspektr.database.driverClass}
#jdbc:mysql://localhost:3307/ticket-repository?autoReconnect=true
inspektr.database.url=${inspektr.database.url}
inspektr.database.user=${inspektr.database.user}
inspektr.database.password=${inspektr.database.password}

passwordhistory.database.driverClass=${passwordhistory.database.driverClass}
passwordhistory.database.url=${passwordhistory.database.url}
passwordhistory.database.user=${passwordhistory.database.user}
passwordhistory.database.password=${passwordhistory.database.password}

# Password Generator Configurations
passwordgenerator.enable=${passwordgenerator.enable}
passwordgenerator.maxTry=${passwordgenerator.maxTry}
passwordgenerator.length=${passwordgenerator.length}

passwordcheck.enable=${passwordcheck.enable}
passwordcheck.length=${passwordcheck.length}
passwordcheck.hasNumeric=${passwordcheck.hasNumeric}
passwordcheck.hasUpperCase=${passwordcheck.hasUpperCase}
passwordcheck.hasLowerCase=${passwordcheck.hasLowerCase}
passwordcheck.hasSymbol=${passwordcheck.hasSymbol}
passwordcheck.hasDifferentSymbols=${passwordcheck.hasDifferentSymbols}
passwordcheck.differentSymbols=${passwordcheck.differentSymbols}
passwordcheck.hasDifferentNumbers=${passwordcheck.hasDifferentNumbers}
passwordcheck.differentNumbers=${passwordcheck.differentNumbers}
passwordcheck.hasDifferentLetters=${passwordcheck.hasDifferentLetters}
passwordcheck.differentLetters=${passwordcheck.differentLetters}

##
# CAS Logout Behavior
# WEB-INF/cas-servlet.xml
#
# Specify whether CAS should redirect to the specified service parameter on /logout requests
cas.logout.followServiceRedirects=true

##
# Single Sign-On Session Timeouts
# Defaults sourced from WEB-INF/spring-configuration/ticketExpirationPolices.xml
#
# Maximum session timeout - TGT will expire in maxTimeToLiveInSeconds regardless of usage
# tgt.maxTimeToLiveInSeconds=28800
#
# Idle session timeout -  TGT will expire sooner than maxTimeToLiveInSeconds if no further requests
# for STs occur within timeToKillInSeconds
# tgt.timeToKillInSeconds=7200

##
# Service Ticket Timeout
# Default sourced from WEB-INF/spring-configuration/ticketExpirationPolices.xml
#
# Service Ticket timeout - typically kept short as a control against replay attacks, default is 10s.  You'll want to
# increase this timeout if you are manually testing service ticket creation/validation via tamperdata or similar tools
# st.timeToKillInSeconds=10

##
# Single Logout Out Callbacks
# Default sourced from WEB-INF/spring-configuration/argumentExtractorsConfiguration.xml
#
# To turn off all back channel SLO requests set slo.disabled to true
# slo.callbacks.disabled=false

##
# Service Registry Periodic Reloading Scheduler
# Default sourced from WEB-INF/spring-configuration/applicationContext.xml
#
# Force a startup delay of 2 minutes.
# service.registry.quartz.reloader.startDelay=120000
# 
# Reload services every 2 minutes
# service.registry.quartz.reloader.repeatInterval=120000

##
# Log4j
# Default sourced from WEB-INF/spring-configuration/log4jConfiguration.xml:
#
# It is often time helpful to externalize log4j.xml to a system path to preserve settings between upgrades.
#e.g. log4j.config.location=/etc/cas/log4j.xml
log4j.config.location=classpath:log4j.xml

log4j refresh interval in millis
log4j.refresh.interval=60000

##
# Encoding
#
# Set the encoding to use for requests. Default is UTF-8
# httprequest.web.encoding=UTF-8

# Default is true. Switch this to "false" to not enforce the specified encoding in any case,
# applying it as default response encoding as well.
# httprequest.web.encoding.force=true

##
# Password Policy
#
# Warn all users of expiration date regardless of warningDays value.
password.policy.warnAll=false

# Threshold number of days to begin displaying password expiration warnings.
password.policy.warningDays=30

# URL to which the user will be redirected to change the passsword.
password.policy.url=https://password.example.edu/change

#========================================
# General properties
#========================================
ldap.url=${ldap.url}
ldap.login=${ldap.login}
ldap.password=${ldap.password}
ldap.password.daysBeforeExpirationWarning=${ldap.password.daysBeforeExpirationWarning}
ldap.filter=${ldap.filter}
ldap.base.users=${ldap.base.users}
ldap.base.ppolicy=${ldap.base.ppolicy}
ldap.ppolicy.default.cn=${ldap.ppolicy.default.cn}

systemUser.list=${systemUser.list}

# LDAP connection timeout in milliseconds
ldap.connectTimeout=3000

# Whether to use StartTLS (probably needed if not SSL connection)
ldap.useStartTLS=false

#========================================
# LDAP connection pool configuration
#========================================
ldap.pool.minSize=3
ldap.pool.maxSize=10
ldap.pool.validateOnCheckout=false
ldap.pool.validatePeriodically=true

# Amount of time in milliseconds to block on pool exhausted condition
# before giving up.
ldap.pool.blockWaitTime=3000

# Frequency of connection validation in seconds
# Only applies if validatePeriodically=true
ldap.pool.validatePeriod=300

# Attempt to prune connections every N seconds
ldap.pool.prunePeriod=300

# Maximum amount of time an idle connection is allowed to be in
# pool before it is liable to be removed/destroyed
ldap.pool.idleTime=600

#========================================
# Authentication
#========================================

# Base DN of users to be authenticated
ldap.authn.baseDn=${ldap.base.users}
# Manager DN for authenticated searches
ldap.authn.managerDN=${ldap.login}
# Manager password for authenticated searches
ldap.authn.managerPassword=${ldap.password}

# Search filter used for configurations that require searching for DNs
#ldap.authn.searchFilter=(&(uid={user})(accountState=active))
ldap.authn.searchFilter=${ldap.authn.searchFilter}

# Search filter used for configurations that require searching for DNs
#ldap.authn.format=uid=%s,ou=Users,dc=example,dc=org
ldap.authn.format=${ldap.authn.format}

cas.viewResolver.basename=csc_views
