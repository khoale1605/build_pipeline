<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
	<beans xmlns="http://www.springframework.org/schema/beans"
			   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xmlns:p="http://www.springframework.org/schema/p"
			   xmlns:tx="http://www.springframework.org/schema/tx"
			   xsi:schemaLocation="
					 http://www.springframework.org/schema/beans
					 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					 http://www.springframework.org/schema/tx
					 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd" >
    <description>
    	Configuration for the default TicketRegistry which stores the tickets in-memory and cleans them out as specified intervals.
    </description>
       
	   
	   
  <!-- Ticket Registry -->
		  <bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.JpaTicketRegistry">
		  </bean>

 <!--
    Injects EntityManager/Factory instances into beans with
    @PersistenceUnit and @PersistenceContext
  -->
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
  
<!-- Use the following for versions prior to 3.4.11 -->
  <!--
  <bean id="ticketRegistry"
    class="org.jasig.cas.ticket.registry.JpaTicketRegistry">
    <constructor-arg index="0" ref="entityManagerFactory" />
  </bean>
  -->
			<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="dataSource" ref="dataSource"/>
			<property name="jpaVendorAdapter">
			  <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true"/>
				<property name="showSql" value="true" />
			  </bean>
			</property>
			<property name="jpaProperties">
			  <props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			  </props>
			</property>
		</bean>

		<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
				p:entityManagerFactory-ref="entityManagerFactory" />

		<tx:annotation-driven transaction-manager="transactionManager" />
		 
	<!--	<bean
                id="dataSource"
                class="org.apache.commons.dbcp.BasicDataSource"
                p:driverClassName="oracle.jdbc.driver.OracleDriver"
                p:url="jdbc:oracle:thin:@csclfsvnm201:1521:cas4db"
                p:password="inpektr"
                p:username="inspektr"/> -->
		<bean
			id="dataSource"
			class="com.mchange.v2.c3p0.ComboPooledDataSource"
			p:driverClass="${inspektr.database.driverClass}"
			p:jdbcUrl="${inspektr.database.url}"
			p:user="${inspektr.database.user}"
			p:password="${inspektr.database.password}"
			p:initialPoolSize="${database.pool.minSize:6}"
			p:minPoolSize="${database.pool.minSize:6}"
			p:maxPoolSize="${database.pool.maxSize:18}"
			p:maxIdleTimeExcessConnections="${database.pool.maxIdleTime:1000}"
			p:checkoutTimeout="${database.pool.maxWait:2000}"
			p:acquireIncrement="${database.pool.acquireIncrement:16}"
			p:acquireRetryAttempts="${database.pool.acquireRetryAttempts:5}"
			p:acquireRetryDelay="${database.pool.acquireRetryDelay:2000}"
			p:idleConnectionTestPeriod="${database.pool.idleConnectionTestPeriod:30}"
			p:preferredTestQuery="${database.pool.connectionHealthQuery:select 1}"
			/>	
				
	<!--Quartz -->
	 <!-- TICKET REGISTRY CLEANER -->
  <bean id="ticketRegistryCleaner"
    	class="org.jasig.cas.ticket.registry.support.DefaultTicketRegistryCleaner"
   	    p:ticketRegistry-ref="ticketRegistry"
  	    p:lock-ref="cleanerLock"
		p:logoutManager-ref="logoutManager" />
  	<!--
   Use JpaLockingStrategy for 3.4.11 and later.
   This bean is only needed for HA setups where multiple nodes are attempting
   cleanup on a shared database, but it doesn't substantially impact performance
   and is easy to setup and is therefore recommended for all JpaTicketRegistry deployments.
   This component automatically creates the LOCKS table so no further configuration
   is required.
  -->
		  <bean id="cleanerLock"
			class="org.jasig.cas.ticket.registry.support.JpaLockingStrategy"
			p:uniqueId="${host.name}"
			p:applicationId="cas-ticket-registry-cleaner"
		  />
 
  <!--
    Use JdbcLockingStrategy on 3.4.10 and before for HA setups where multiple nodes are attempting
    cleanup on a shared database.  This bean requires additional configuration:
     1. Creation of LOCKS table (see below)
     2. Setting ticket.cleaner.database.platform property
    Note that the ticket.cleaner.database.platform property should be set in cas.properties
    or some other properties file that is loaded by a PropertyPlaceholderConfigurer bean in
    the Spring context.
    Allowed values for ticket.cleaner.database.platform:
      * SqlServer for Microsoft SQL Server
      * HSQL for HSQLDB
      * SQL92 for any platform that supports the SQL-92 FOR UPDATE clause. (e.g. PostgreSQL, Oracle)
  -->
  <!--
  <bean id="cleanerLock"
    class="org.jasig.cas.ticket.registry.support.JdbcLockingStrategy"
    p:uniqueId="${host.name}"
    p:platform="${ticket.cleaner.database.platform}"
    p:applicationId="cas-ticket-registry-cleaner"
    p:dataSource-ref="dataSource" />
  -->
    
	<bean id="ticketRegistryCleanerJobDetail"
    class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"
    p:targetObject-ref="ticketRegistryCleaner"
    p:targetMethod="clean"
	/>
	  <bean id="periodicTicketRegistryCleanerTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerBean"
		p:jobDetail-ref="ticketRegistryCleanerJobDetail"
		p:startDelay="20000"
		p:repeatInterval="1800000"
	  />
</beans>